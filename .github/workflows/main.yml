# This is a basic workflow to help you get started with Actions

name: Test, Push, Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # test-controller:
  #   name: 'Test logic'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup dotnet
  #       uses: actions/setup-dotnet@v3
  #       with:
  #          dotnet-version: '6.0.x'
  #     - name: Install dependencies
  #       run: dotnet restore ShoppingClientTests/ShoppingClientTests.csproj
  #     - name: Build
  #       run: dotnet build ShoppingClientTests/ShoppingClientTests.csproj
  #     - name: Test with the dotnet CLI
  #       run: dotnet test  ShoppingClientTests/ShoppingClientTests.csproj --filter FullyQualifiedName~HomeControllerTests
  # # This workflow contains a single job called "build"
  # build-and-push-on-DockerHub:
  #   name: 'Docker Build and Push to Docker Hub'
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   needs: test-controller
  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
  #     - name: docker login
  #       env:
  #         DOCKER_USERNAME: ${{vars.DOCKER_USERNAME}}
  #         DOCKER_PASSWORD: ${{vars.DOCKER_PASSWORD}}
  #       run: |
  #         docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  #     - name : Build the Docker Image for Client
  #       working-directory : Shopping.Client
  #       run: docker build -f ./Dockerfile --force-rm -t ${{vars.DOCKER_USERNAME}}/${{vars.SHOPPING_CLIENT}}:latest ..
  #     - name : Build the Docker Image for API
  #       working-directory : Shopping.API
  #       run: docker build -f ./Dockerfile --force-rm -t ${{vars.DOCKER_USERNAME}}/${{vars.SHOPPING_API}}:latest ..
  #     - name: Docker Hub push client
  #       run: docker push  ${{vars.DOCKER_USERNAME}}/${{vars.SHOPPING_CLIENT}}:latest
  #     - name: Docker Hub push api
  #       run: docker push ${{vars.DOCKER_USERNAME}}/${{vars.SHOPPING_API}}:latest


  
  docker_build_push_acr:
    name: 'Docker Build and Push to ACR'
    runs-on: ubuntu-latest
    #needs: build-and-push-on-DockerHub
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: 'Docker Login'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ vars.ACREGISTRY_LOGIN_SERVER}}
        username: ${{ vars.ACREGISTRY_USERNAME }}
        password: ${{ vars.ACR_PASSWORD }}
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build the frontend image and push it to ACR
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: kinderdllacr.azurecr.io/shoppingclient:latest
        file: Shopping.Client/Dockerfile
    - name: Build the backend image and push it to ACR
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: kinderdllacr.azurecr.io/shoppingapi:latest
        file: Shopping.API/Dockerfile

  deploy_to_Kubernetes_on_ACR_image_push:
    name: 'Deploy to K8s on ACR Image Push'
    needs: docker_build_push_acr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ vars.AZURE_CREDENTIALS }}
      - name: Get ACR Image Digest
        id: get_image_digest
        run: |
            echo "::set-output name=shoppingapi::$(docker inspect --format='{{index .RepoDigests 0}}' kinderdllacr.azurecr.io/shoppingapi:latest)"
            echo "::set-output name=shoppingclient::$(docker inspect --format='{{index .RepoDigests 0}}' kinderdllacr.azurecr.io/shoppingclient:latest)"
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'
      - name: Ensure Cluster Availability
        run: "az aks show --resource-group myResourceGroup --name myAKSCluster"
      - name: Configure kubectl
        run: "az aks get-credentials --resource-group myResourceGroup --name myAKSCluster"
      - name: Install Helm
        run: |
            curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
            sudo apt-get install apt-transport-https --yes
            echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
            sudo apt-get update
            sudo apt-get install helm
      - name: Install NGINX via helm
        run: |
          #helm upgrade --install ingress-nginx ingress-nginx  --repo https://kubernetes.github.io/ingress-nginx --namespace ingress-nginx --create-namespace  -f nginx/nginx-values.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f aks/.
